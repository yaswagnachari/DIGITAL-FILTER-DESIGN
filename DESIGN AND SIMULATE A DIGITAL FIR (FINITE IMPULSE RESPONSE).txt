âœ… Option 1: MATLAB Implementation

ðŸ”§ Step 1: Design the FIR Filter
We'll design a low-pass FIR filter using MATLABâ€™s built-in fir1 function.

% FIR Filter Design using fir1
N = 20;               % Filter order
Fc = 0.3;             % Normalized cutoff frequency (0 to 1)
b = fir1(N, Fc);      % FIR coefficients using Hamming window

% Frequency Response
freqz(b,1)
title('FIR Filter Frequency Response');

ðŸ”§ Step 2: Apply Filter to Input Signal


% Create input signal (50Hz + 200Hz)
Fs = 1000;                        % Sampling frequency
t = 0:1/Fs:1;                     % 1 second duration
x = sin(2*pi*50*t) + sin(2*pi*200*t);  % Mixed signal

% Apply FIR filter
y = filter(b, 1, x);

% Plot results
subplot(3,1,1); plot(t, x); title('Input Signal'); grid on;
subplot(3,1,2); stem(b); title('FIR Coefficients (Impulse Response)'); grid on;
subplot(3,1,3); plot(t, y); title('Filtered Output'); grid on;


âœ… Option 2: Verilog Implementation

ðŸ”§ Step 1: 3-Tap FIR Filter (Example)

module fir_filter (
    input clk,
    input reset,
    input signed [7:0] x_in,
    output reg signed [15:0] y_out
);
    // Coefficients (example: symmetric)
    parameter signed [7:0] b0 = 8'd1;
    parameter signed [7:0] b1 = 8'd2;
    parameter signed [7:0] b2 = 8'd1;

    // Delay line
    reg signed [7:0] x0, x1, x2;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            x0 <= 0; x1 <= 0; x2 <= 0;
            y_out <= 0;
        end else begin
            // Shift inputs
            x2 <= x1;
            x1 <= x0;
            x0 <= x_in;

            // Convolution
            y_out <= b0*x0 + b1*x1 + b2*x2;
        end
    end
endmodule

ðŸ§ª Step 2: Testbench for FIR Filter


module test_fir;

    reg clk = 0, reset;
    reg signed [7:0] x_in;
    wire signed [15:0] y_out;

    fir_filter DUT (.clk(clk), .reset(reset), .x_in(x_in), .y_out(y_out));

    // Clock generation
    always #5 clk = ~clk;

    initial begin
        $monitor("Time = %0t | Input = %d | Output = %d", $time, x_in, y_out);
        reset = 1; x_in = 0;
        #10 reset = 0;

        // Apply sample input values
        x_in = 8'd10; #10;
        x_in = 8'd20; #10;
        x_in = 8'd30; #10;
        x_in = 8'd0;  #10;
        x_in = 8'd0;  #10;
        $finish;
    end
endmodule


ðŸ“Š Simulation Results
MATLAB:
Plots show input, impulse response, and filtered output.

Frequency response shows cutoff behavior.

Verilog:
Use ModelSim or GTKWave to visualize waveform.

Output verifies correct FIR computation (convolution of inputs with coefficients).

âœ… Conclusion
Tool	Use Case
MATLAB	Quick design, visualization, DSP-focused
Verilog	Hardware realization (FPGA/ASIC)

Both methods demonstrate FIR filter behavior clearly.




